generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ProductMaterial {
  id     Int
  name   String
  weight Float
}

type Nutrition {
  id     Int
  name   String
  amount Float
}

enum OrderStatus {
  PURCHASED_AND_PENDING
  PURCHAS_ROLLED_BACK
  ACCEPTED
  REJECTED
  COOKING
  SENDING
  RECIVED
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  image       String?
  name        String
  slug        String
  isActive    Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Date
  updated_at  DateTime? @updatedAt() @db.Date

  products    Product[] @relation(fields: [product_ids], references: [id])
  product_ids String[]  @db.ObjectId

  @@unique([slug])
  @@map("categories")
}

model Product {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  calory       Int?
  description  String?
  defaultImage String?
  images       String[]
  isPromoted   String?
  materials    ProductMaterial[]
  nutritions   Nutrition[]
  name         String
  slug         String
  price        Int
  size         String?
  isActive     Boolean           @default(true)
  created_at   DateTime          @default(now()) @db.Date
  updated_at   DateTime          @updatedAt() @db.Date

  categories   Category[] @relation(fields: [category_ids], references: [id])
  category_ids String[]   @db.ObjectId

  @@unique([slug])
  @@map("products")
}


type BasketItem {
   id String  
   quantity Int
   product Json
}

model Order {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  basket_items BasketItem[]  
  status   OrderStatus
  user     User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String      @db.ObjectId

  created_at   DateTime          @default(now()) @db.Date
  updated_at   DateTime          @updatedAt() @db.Date

  @@map("orders")
}

model File {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  url              String?
  size             Int?
  mimetype         String?
  uploadPath       String?
  originalFilename String?
  newFilename      String?
  created_at       DateTime @default(now()) @db.Date
  updated_at       DateTime @updatedAt() @db.Date

  @@map("files")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  phonenumber String
  name        String?
  role        Role      @default(USER)
  created_at  DateTime  @default(now()) @db.Date
  updated_at  DateTime  @updatedAt() @db.Date
  sessions    Session[]
  orders      Order[]

  @@unique([phonenumber])
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
