generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ProductMaterial {
  id     Int
  name   String
  weight Float
}

type Nutrition {
  id     Int
  name   String
  amount Float
}

type Location {
  lat Float
  lon Float
}

type Address {
  id          String   @default(uuid())
  title       String
  location    Location
  description String
  isActive    Boolean  @default(false)
}

enum OrderStatus {
  PURCHASED_AND_PENDING
  PURCHAS_ROLLED_BACK
  ACCEPTED
  ADMIN_REJECTED
  USER_REJECTED
  COOKING
  SENDING
  RECIVED
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  image       String?
  name        String
  slug        String
  isActive    Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Date
  updated_at  DateTime? @updatedAt() @db.Date

  products    Product[] @relation(fields: [product_ids], references: [id])
  product_ids String[]  @db.ObjectId

  @@unique([slug])
  @@map("categories")
}

enum Days {
  Saturday
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

type TimePeriod {
  startHour Int? @default(0)
  endHour   Int? @default(0)
}

type DeliverPeriod {
  availableDaysOfWeek String[]    @default([])
  timePeriod          TimePeriod?
  delay               Int         @default(0)
}

model Product {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  calories           Int?              @default(0)
  description        String?
  defaultImage       String?
  images             String[]
  isPromoted         String?
  materials          ProductMaterial[]
  nutritions         Nutrition[]
  deliver_period     DeliverPeriod?
  available_quantity Int               @default(0)
  meal_type          String?
  name               String
  slug               String
  price              Int
  size               String?
  isActive           Boolean           @default(true)
  created_at         DateTime          @default(now()) @db.Date
  updated_at         DateTime          @updatedAt() @db.Date

  categories   Category[] @relation(fields: [category_ids], references: [id])
  category_ids String[]   @db.ObjectId

  @@unique([slug])
  @@map("products")
}

type BasketItem {
  id       String
  quantity Int
  product  Json
}

type DeliverPeriodDateTime {
  start DateTime
  end DateTime
}
model Order {
  id                      String       @id @default(auto()) @map("_id") @db.ObjectId
  basket_items            BasketItem[]
  status                  OrderStatus
  tax                     Float
  has_coupon              Boolean
  coupon_code             String?
  coupon_discount         Int?
  total_price             Int
  address                 Address
  deliver_datetime_string String?      @default("")
  deliver_date_string     String
  deliver_datetime        DeliverPeriodDateTime
  user                    User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id                 String       @db.ObjectId

  created_at    DateTime    @default(now()) @db.Date
  updated_at    DateTime    @updatedAt() @db.Date
  optimePlan    OptimePlan? @relation(fields: [optimePlan_id], references: [id])
  optimePlan_id String?     @db.ObjectId

  @@map("orders")
}

model OptimePlan {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  plan_token          String
  deliver_date_string String
  orders              Order[]
  created_at          DateTime @default(now()) @db.Date
  updated_at          DateTime @updatedAt() @db.Date

  @@map("optimePlan")
}

type Ingredient {
  id        String @default(uuid())
  name      String
  calories  String
  image_url String
}

model Material {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image_url   String
  max_choose  Int
  ingredients Ingredient[]
}

enum MachineType {
  BIKE
  CAR
}

model File {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  url              String?
  size             Int?
  mimetype         String?
  uploadPath       String?
  originalFilename String?
  newFilename      String?
  created_at       DateTime @default(now()) @db.Date
  updated_at       DateTime @updatedAt() @db.Date

  @@map("files")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  phonenumber String
  first_name  String?
  last_name   String?
  ibancode    String?
  role        Role      @default(USER)
  gender      Gender    @default(OTHER)
  birthday    String?   @default("")
  created_at  DateTime  @default(now()) @db.Date
  updated_at  DateTime  @updatedAt() @db.Date
  addresses   Address[]
  orders      Order[]
  sessions    Session[]

  @@unique([phonenumber])
  @@map("users")
}

model Coupon {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  remainder_count     Int          @default(1)
  status              CouponStatus @default(Enable)
  min_price           Int          @default(0)
  max_price           Int          @default(0)
  discount_percentage Int          @default(0)
  expire_date         DateTime     @default(now())
}

enum CouponStatus {
  Enable
  Disable
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
